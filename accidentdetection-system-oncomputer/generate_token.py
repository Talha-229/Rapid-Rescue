import jwt
from datetime import datetime, timedelta
import secrets
import json
import os

# Admin credentials
ADMIN_USERNAME = "Admin"
ADMIN_PASSWORD = "pakistan123"

# Token configuration
JWT_SECRET_KEY = secrets.token_hex(32)  # Generate a secure random key
TOKEN_FILE = "token_config.json"

def save_secret_key(secret_key):
    """Save the secret key to a configuration file"""
    config = {
        "secret_key": secret_key,
        "created_at": datetime.utcnow().isoformat()
    }
    with open(TOKEN_FILE, 'w') as f:
        json.dump(config, f, indent=4)
    print(f"\nSecret key saved to {TOKEN_FILE}")

def load_secret_key():
    """Load the existing secret key if available"""
    try:
        with open(TOKEN_FILE, 'r') as f:
            config = json.load(f)
            return config["secret_key"]
    except (FileNotFoundError, KeyError):
        return None

def generate_admin_token(username, password):
    """Generate a new admin token with lifetime access"""
    if username != ADMIN_USERNAME or password != ADMIN_PASSWORD:
        raise ValueError("Invalid credentials")

    # Use existing secret key if available, otherwise save the new one
    secret_key = load_secret_key()
    if not secret_key:
        secret_key = JWT_SECRET_KEY
        save_secret_key(secret_key)

    # Set expiration to 100 years from now for lifetime access
    lifetime_expiration = int((datetime.utcnow() + timedelta(days=36500)).timestamp())
    
    token = jwt.encode(
        {
            'user_id': 'admin',
            'is_superuser': True,
            'exp': lifetime_expiration,
            'iat': int(datetime.utcnow().timestamp()),
            'jti': secrets.token_hex(16),
            'created_by': username
        },
        secret_key,
        algorithm='HS256'
    )
    
    return token, secret_key

def main():
    try:
        print("\n=== Admin Token Generator ===")
        username = input("Enter admin username: ")
        password = input("Enter admin password: ")
        
        token, secret_key = generate_admin_token(username, password)
        
        print("\nNew Admin Token generated successfully!")
        print("\nToken (save this for future use):")
        print("=" * 50)
        print(token)
        print("=" * 50)
        
        # Save token to environment variable
        os.environ['INFERENCE_TOKEN'] = token
        
        print("\nToken has been set in the environment variable 'INFERENCE_TOKEN'")
        print("\nYou can now use this token to run the inference script.")
        print("\nTo use this token later, set it as an environment variable:")
        print(f"os.environ['INFERENCE_TOKEN'] = '{token}'")
        
        # Save token to a file for backup
        with open("admin_token.txt", "w") as f:
            f.write(f"Token generated at: {datetime.utcnow().isoformat()}\n")
            f.write(f"Generated by: {username}\n")
            f.write("=" * 50 + "\n")
            f.write(token + "\n")
            f.write("=" * 50 + "\n")
        
        print("\nToken has been saved to 'admin_token.txt' for backup.")
        
    except ValueError as e:
        print(f"\nError: {e}")
    except Exception as e:
        print(f"\nAn unexpected error occurred: {e}")

if __name__ == "__main__":
    main() 